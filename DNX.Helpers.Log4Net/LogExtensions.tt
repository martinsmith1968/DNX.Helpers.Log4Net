<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="MultipleOutputHelper.ttinclude" #>
<# // http://mariusbancila.ro/blog/2012/09/03/t4-lessons-learned/ #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#
var types = new Dictionary<string, string>()
{
	{ "Debug", "Debug" },
	{ "Info", "Info" },
	{ "Warn", "Warn" },
	{ "Error", "Error" },
	{ "Fatal", "Fatal" },
}; #>
<# manager.StartHeader(); #>
// Code generated by a Template
using System;
using log4net;

namespace DNX.Helpers.Log4Net
{
<# manager.EndBlock(); #>
<#
foreach (var kvp in types)
{
	var typeName = kvp.Value;
	var typeDesc = kvp.Key;
	var fileName = string.Format("LogExtensions.{0}.generated.cs", typeDesc);

	manager.StartNewFile(fileName);
#>
    /// <summary>
    /// Class LogExtensions for <#= typeName #>
    /// </summary>
    public static partial class LogExtensions
    {
        /// <summary>
        /// Writes a <#= typeName #> message, if <#= typeName #> is enabled
        /// </summary>
        /// <param name="logger">The logger.</param>
        /// <param name="messageText">The messageText.</param>
        public static void <#= typeName #>Func(this ILog logger, Func<string> messageText)
        {
            if (logger.Is<#= typeName #>Enabled)
            {
                logger.<#= typeName #>(messageText());
            }
        }

        /// <summary>
        /// Writes a <#= typeName #> message with Exception, if <#= typeName #> is enabled
        /// </summary>
        /// <param name="logger">The logger.</param>
        /// <param name="messageText">The message text.</param>
        /// <param name="exception">The exception.</param>
        public static void <#= typeName #>Func(this ILog logger, Func<string> messageText, Func<Exception> exception)
        {
            if (logger.Is<#= typeName #>Enabled)
            {
                logger.<#= typeName #>(messageText(), exception());
            }
        }
	}
<#	manager.EndBlock();
} #>
<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>
